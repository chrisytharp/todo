Localhost Listener on TCP and UDP Ports 53
Ubuntu uses a daemon named "systemd-resolved" for resolving DNS queries that you initiate from the system. This daemon listens on the localhost interface on TCP and UDP ports 53. If you're running a tool that attempts to listen on these ports on localhost, your tool might not function properly.
To get around this, reconfigure the tool so it listens on the Ethernet network interface of your REMnux system and not on the localhost network interface. For example, to do this for FakeNet-NG, edit its configuration file /usr/lib/python2.7/dist-packages/fakenet/configs/default.ini so that the LinuxRestrictInterface parameter is set to your Ethernet network interface name, such as ens33.
Alternatively, you can disable the systemd-resolved daemon until the next reboot like this:
sudo systemctl stop systemd-resolved
If you wish to disable systemd-resolved permanently issue the following command. However, note that if you disable this daemon, you will be unable to resolve DNS queries from your REMnux system unless you reconfigure the system's DNS resolver settings. Also, some software, such as OpenVPN and other VPN clients, might not function properly if systemd-resolved is disabled.
sudo systemctl disable systemd-resolved


docker run --rm -it -u remnux -v ~/:/home/remnux/files remnux/remnux-distro bash





setup up minimal ubuntu 18.04 qnd install by wget

remnux --addon (installs on an existing 18.04)

Run the (all of REmnux) RMNUX as a container
docker container: docker run --rm -it -u remnux remnux/remnux-distro bash

docker run -rm -it -u remnux -v /home/remnux/files remnux/ermnux-distro bash
"""  (-v will run the remnux docker with access to computers
DIRECTORY)"""


#yara-rules sample.exe   (dont need to add .yara signatures)
#clamscan sample.exe     (bumps this exe with clam signature DB| #freshclam to update signatures)
#signsrch sample.exe     (looks for signatures for cryptographic data/ encode and decode data)


#peframe sample.exe (gives info about PE)
#pecheck sample.exe (more verbose info about PE)(high degree of entropy= most likely packed)will show overlay
--overlay! is data addes to file after the file has been already created- mot likely malicious
#pecheck -g o -D sample.exe > sample.exe.overlay  (to extrsact the overlay)
 then #strings samole.exe.overlay
#pestr sample.exe | more   (extracts strings)


STATIC TOOLS TO DEOBFUSCATE

#xorsearch sample.exe http
#brxor.py sample.exe   (decodes and auto decodes with showing key)
#Floss sample.exe    (floss emulates execution of program and shows more than 1 byte long xor after emultaor execution)

(emulate execution of malware to see api calls-intercept api calls when emulates the execution)
#binee sample.exe
(has windows emulator installed on remnux)
(heavy tools that uou can run on remnux with docker)
#docker run -it 0rm 0v ~/:/tmp/files remnux/retdec bash
  #cd /tmp/files
  #retdec-decompiler.py sample.exe   (decompiles and generates sample.exe.c file)

  #exit  (to exit container)

#capa -vv sample.exe   (emulate execution of malware)

#ghidra
  look at file offset shown in capa hex offset

switch host only nw adapter----------

renew-dhcp
windows on same nw and windows is config to use remnux as DG and DNS

#fakedns  (fake remnux as the dns server)
#wireshark &
#inetsim

-now infect windows with sample.exe - windows running process hacker
