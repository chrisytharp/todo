LINE
26          Task Manager
38          System
84          System > smss.exe                        (Session Manager Subsystem)
119         csrss.exe                                (Client/Server Runtime Subsystem)
146         wininit.exe                              (Windows Initialization Process)
167         wininit.exe > services.exe               (Service Control Manager (SCM))
196         wininit.exe > services.exe > svchost.exe (Service Host)
233         lsass.exe                                (Local Security Authority Subsystem Service)
258         winlogon.exe                             (Windows Logon)
284         explorer.exe                             (Windows Explorer)












https://www.threathunting.se/tag/windows-process/
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Task Manager
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Task Manager is a built-in GUI-based Windows utility that allows users to see what is running on the Windows system. It also provides information on resource 
usage, such as how much CPU and memory are utilized by each process. When a program is not responding, Task Manager is used to end (kill) the process. 

5 Tabs: Processes, Performance, User, Details, Services
      Add additional columns in Processess & Details by Righ-Clicking on any Columsn 
          -add Image path name & Command line

Aside from Task Manager, it would be best if you also familiarize yourself with the command-line equivalent of obtaining information about the running 
processes on a Windows system: tasklist, Get-Process or ps (PowerShell), and wmic.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
System
----------------------------------------------------------------------------------------------------------------------------------------------------------------
The first Windows process on the list is SYSTEM. A PID for any given process is assigned at RANDOM, but that is not the case for the System process. The PID for
System is ALWAYS 4

The official definition from Windows Internals 6th Edition:
"The System process (process ID 4) is the home for a special kind of thread that runs only in kernel mode a KERNERL-MODE SYSTEM THREAD. System threads have all 
the attributes and contexts of regular user-mode threads (such as a hardware context, priority, and so on) but are different in that they run only in kernel-mode
executing code loaded in system space, whether that is in {Ntoskrnl.exe} or in any other loaded device driver. In addition, system threads DON'T have a user 
'process address space' and hence must allocate any dynamic storage from operating system "memory heaps", such as a paged or nonpaged pool."
----------
User mode|
----------
When you start a user-mode application, Windows creates a process for the application. The process provides the application with a private virtual address space
and a private handle table. Because an application's virtual address space is private, one application cannot alter data that belongs to another application. 
Each application runs in isolation, and if an application crashes, the crash is limited to that one application. Other applications and the operating system 
are not affected by the crash.
In addition to being private, the virtual address space of a user-mode application is limited. A processor running in user mode cannot access virtual addresses
that are reserved for the operating system. Limiting the virtual address space of a user-mode application prevents the application from altering, and possibly
damaging, critical operating system data.
------------
Kernel mode|
------------
All code that runs in kernel mode shares a single virtual address space. This means that a kernel-mode driver is not isolated from other drivers and the
operating system itself. If a kernel-mode driver accidentally writes to the wrong virtual address, data that belongs to the operating system or another driver 
could be compromised. If a kernel-mode driver crashes, the entire operating system crashes.

Process Explorer view of the properties for System:
      Image Path:  N/A
      Parent Process:  None
      Number of Instances:  One
      User Account:  Local System
      Start Time:  At boot time

Information is slightly different if we view the System properties using Process Hacker.
      Image Path: C:\Windows\system32\ntoskrnl.exe (NT OS Kernel)
      Parent Process: System Idle Process (0)

NOTE: that Process Hacker confirms this is legit '(Verified) Microsoft Windows. 

What is unusual behavior for this process?
      A parent process (aside from System Idle Process (0))
      Multiple instances of System. (Should only be 1 instance) 
      A different PID. (Remember that the PID will always be PID 4)
      Not running in Session 0
----------------------------------------------------------------------------------------------------------------------------------------------------------------
System > smss.exe  (Session Manager Subsystem)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
smss.exe is (Session Manager Subsystem) also known as the Windows Session Manager, is responsible for creating new sessions. 
This is the first user-mode process started by the kernel!!

This process starts the "kernel mode" and "user mode" of the Windows subsystem. 
This subsystem includes win32k.sys(kernel mode), winsrv.dll (user mode), and csrss.exe (user mode). 

Smss.exe starts csrss.exe and wininit.exe in Session 0 (an isolated Windows session for the operating system) and csrss.exe and winlogon.exe for Session 1 
(which is the user session) The first child instance creates child instances in new sessions. This is done by smss.exe COPYING itselfinto the newsession and 
self-terminating. 

      Session 0 (csrss.exe & wininit.exe)
      Session 1 (csrss.exe & winlogon.exe)

Any other subsystem listed in the Required value of HKLM\System\CurrentControlSet\Control\Session Manager\Subsystems is also launched.

SMSS is also responsible for creating environment variables, virtual memory paging files and starts winlogon.exe (the Windows Logon Manager).

What is normal?
	
      Image Path:  %SystemRoot%\System32\smss.exe
      Parent Process:  System
      Number of Instances:  One master instance and child instance per session. The child instance exits after creating the session.
      User Account:  Local System
      Start Time:  Within seconds of boot time for the master instance

What is unusual?
      A different parent process other than System(4)
      Image path is different from C:\Windows\System32
      More than 1 running process. (children self-terminate and exit after each new session)
      User is not SYSTEM
      Unexpected registry entries for Subsystem
NOTE: Adding the Session ID column in Process Hacker 
----------------------------------------------------------------------------------------------------------------------------------------------------------------
csrss.exe     (Client/Server Runtime Subsystem)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
csrss.exe (Client Server Runtime Process) is the user-mode side of the Windows subsystem. This process is always running and is critical to system operation. 
This process is responsible for the "Win32 consolewindow" and "process thread creation and deletion". For each instance csrsrv.dll, basesrv.dll, and winsrv.dll 
are loaded (along with others). 

This process is also responsible for making the Windows API available to other processes, mapping drive letters, and handling the Windows shutdown process.

Note: Recall that csrss.exe and winlogon.exe are called from smss.exe at startup for Session 1. 

What is normal for csrss.exe?
        Session 0
        Session 1
        Image Path:  %SystemRoot%\System32\csrss.exe
        Parent Process:  Created by an instance of smss.exe
        Number of Instances:  Two or more
        User Account:  Local System
        Start Time:  Within seconds of boot time for the first 2 instances (for Session 0 and 1)
        
Start times for additional instances occur as new sessions are created, although often only Sessions 0 and 1 are created.

What is unusual?
        An actual parent process. (smss.exe calls this process and self-terminates)
        Image file path other than C:\Windows\System32
        Subtle misspellings to hide rogue process masquerading as csrss.exe in plain sight
        User is not SYSTEM
----------------------------------------------------------------------------------------------------------------------------------------------------------------
wininit.exe     (Windows Initialization Process)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
wininit.exe is responsible for launching services.exe (Service Control Manager), lsass.exe (Local Security Authority), and lsaiso.exe within Session 0. 
This is another critical Windows process that runs in the background, along with its child processes. 

Note: lsaiso.exe is a process associated with Credential Guard and Key Guard. You will only see this process if Credential Guard is enabled. 

What is normal?
        Image Path:  %SystemRoot%\System32\wininit.exe
        Parent Process:  Created by an instance of smss.exe
        Number of Instances:  One
        User Account:  Local System
        Start Time:  Within seconds of boot time

What is unusual?
        An actual parent process. (smss.exe calls this process and self-terminates)
        Image file path other than C:\Windows\System32
        Subtle misspellings to hide rogue process in plain sight
        Multiple running instances
        Not running as SYSTEM
----------------------------------------------------------------------------------------------------------------------------------------------------------------
wininit.exe > services.exe(Service Control Manager (SCM))
----------------------------------------------------------------------------------------------------------------------------------------------------------------
services.exe is the Service Control Manager (SCM) Its primary responsibility is to handle system services: loading services, interacting with services, 
starting/ending services, etc. 

!!! It maintains a database that can be queried using a Windows built-in utility, 'sc.exe.' !!!

Information regarding services is stored in the registry, HKLM\System\CurrentControlSet\Services. 
This process also loads device drivers marked as auto-start into memory. 

When a user logs into a machine successfully, this process is responsible for setting the value of the Last Known Good control set (Last Known Good Configuration)
HKLM\System\Select\LastKnownGood, to that of the CurrentControlSet. 

This process is the parent to several other key processes: svchost.exe, spoolsv.exe, msmpeng.exe, dllhost.exe, & more

What is normal?
        Image Path:  %SystemRoot%\System32\services.exe
        Parent Process:  wininit.exe
        Number of Instances:  One
        User Account:  Local System
        Start Time:  Within seconds of boot time

What is unusual?
        A parent process other than wininit.exe
        Image file path other than C:\Windows\System32
        Subtle misspellings to hide rogue process in plain sight
        Multiple running instances
        Not running as SYSTEM
----------------------------------------------------------------------------------------------------------------------------------------------------------------
wininit.exe > services.exe > svchost.exe(Service Host)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Service Host (Host Process for Windows Services), or svchost.exe, is responsible for hosting and managing Windows services. 

The services running in this process are implemented as DLLs. The DLL to implement is stored in the registry for the service under the Parameters subkey in 
ServiceDLL. The full path is HKLM\SYSTEM\CurrentControlSet\Services\SERVICE NAME\Parameters.

  Example the ServiceDLL value for the Dcomlaunch service.
  1.) In order to view this information from within Process Hacker right-click the svchost.exe process.
  2.) Right-click the service and select Properties. Look at Service DLL.
  3.) the Binary Path is listed here

NOTICE how it is structured! There is a key identifier in the binary path. That identifier is -k . This is how a legitimate svchost.exe process is called. 

The -k parameter is for grouping similar services to share the same process. This concept was based on the OS design and implemented to reduce resource 
consumption. Starting from Windows 10 Version 1703 services grouped into host processes changed. On machines running more than 3.5 GB of memory, each service will
run its own process.
The key identifier (-k) from the binary path (above) is Dcomlaunch.

Since svchost.exe will always have multiple running processes on any Windows system, this process has been a target for malicious use. Adversaries create malware
to masquerade as this process and try to hide amongst the legitimate svchost.exe processes. They can name the malware svchost.exe or misspell it slightly, such
as scvhost.exe. By doing so the intention is to go under the radar. Another tactic is to install/call a malicious service (DLL).  

What is normal?
        Image Path: %SystemRoot%\System32\svchost.exe
        Parent Process: services.exe
        Number of Instances: Many
        User Account: Varies (SYSTEM, Network Service, Local Service) depending on the svchost.exe instance. 
                      In Windows 10 some instances can run as the logged-in user.
        Start Time: Typically within seconds of boot time. Other instances can be started after boot

What is unusual?
        A parent process other than services.exe
        Image file path other than C:\Windows\System32
        Subtle misspellings to hide rogue process in plain sight
        The absence of the -k parameter
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 lsass.exe    (Local Security Authority Subsystem Service)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
LSASS is a process in Microsoft Windows operating systems that is responsible for enforcing the security policy onthe system. It verifies users logging on to a
Windows computer or server, handles password changes, and creates access tokens. It also writes to the Windows Security Log."

It creates security tokens for SAM (Security Account Manager), AD (Active Directory), and NETLOGON.
It uses authentication packages specified in HKLM\System\CurrentControlSet\Control\Lsa.

This is another process adversaries target. Common tools such as mimikatz is used to dump credentials or they mimic this process to hide in plain sight.
they do this by either naming their malware by this process name or simply misspelling the malware slightly. 

What is normal?
        Image Path:  %SystemRoot%\System32\lsass.exe
        Parent Process:  wininit.exe
        Number of Instances:  One
        User Account:  Local System
        Start Time:  Within seconds of boot time

What is unusual?
        A parent process other than wininit.exe
        Image file path other than C:\Windows\System32
        Subtle misspellings to hide rogue process in plain sight
        Multiple running instances
        Not running as SYSTEM
----------------------------------------------------------------------------------------------------------------------------------------------------------------
winlogon.exe    (Windows Logon)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Twinlogon.exe is responsible for handling the Secure Attention Sequence (SAS). 
This is the ALT+CTRL+DELETE key combination users press to enter their username & password. 

This process is also responsible for loading the user profile by loading the user's NTUSER.DAT into HKCU and via userinit.exe loads the user's shell.

It is also responsible for locking the screen and running the user's screensaver, among other functions. 

NOTE: smss.exe launches this process along with a copy of csrss.exe within Session 1. 

What is normal?
      Image Path:  %SystemRoot%\System32\winlogon.exe
      Parent Process:  Created by an instance of smss.exe that exits, so analysis tools usually do not provide the parent process name.
      Number of Instances:  One or more
      User Account:  Local System
      Start Time:  Within seconds of boot time for the first instance (for Session 1).  Additional instances occur as new sessions are created, typically through
                   Remote Desktop or Fast User Switching logons.

What is unusual?
      An actual parent process. (smss.exe calls this process and self-terminates)
      Image file path other than C:\Windows\System32
      Subtle misspellings to hide rogue process in plain sight
      Not running as SYSTEM
      Shell value in the registry other than explorer.exe
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 explorer.exe     (Windows Explorer)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
explorer.exe is the process that gives the user access to their folders & files. It provides functionality to other features such as the Start Menu, Taskbar,etc. 

The Winlogon process runs userinit.exe, which launches the value in HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell. 
Userinit.exe exits after spawning explorer.exe. Because of this, the parent process is non-existent. 

There will be many child processes for explorer.exe.

What is normal?
        Image Path:  %SystemRoot%\explorer.exe
        Parent Process:  Created by userinit.exe and exits
        Number of Instances:  One or more per interactively logged-in user
        User Account:  Logged-in user(s)
        Start Time:  First instance when the first interactive user logon session begins

What is unusual?
        An actual parent process. (userinit.exe calls this process and exits)
        Image file path other than C:\Windows
        Running as an unknown user
        Subtle misspellings to hide rogue process in plain sight
        Outbound TCP/IP connections
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
